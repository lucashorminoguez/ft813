'INCLUDES------------------------------------------------------------

include "display\API_Layer.tbh"
include "logo.tbh"

'DECLARATIONS--------------------------------------------------------

dim entradaValue(10) as word
dim screenState as byte
dim tagAnterior as byte
dim displayInUse as boolean
dim mensajeInformativo as string
dim modoMensajeInformativo as no_yes
dim mensajeInformativoPendiente as no_yes = NO
dim timeMensajeInformativo as word
dim datosGuardados as no_yes
dim pantallaActual as byte = 0 
dim pantallaAGuardar as byte
dim pantallaActualIndex as byte
dim tag as byte
dim imgAddress as dword
declare function DisplayAPI_SendString(byref texto as string) as byte
dim cmdOffset as word
dim touch as byte
dim tagEnabled as no_yes = YES

'FUNCIONES-----------------------------------------------------------

sub DisaplyAPI_Init()
	FT813_init()
	cmdOffset = 0
end sub

function displayAPI_ReadTag as byte
	displayAPI_ReadTag = EVE_MemRead8(REG_TOUCH_TAG)
end function

function displayAPI_ReadYScroll as dword
	displayAPI_ReadYScroll = EVE_MemRead32(REG_TRACKER)
end function

sub DisplayAPI_DisableTags()
	tagEnabled = NO
end sub

sub DisplayAPI_EnableTags()
	tagEnabled = YES
end sub

sub DisplayAPI_DeleteTags ()
    EVE_Write32( &h120000FF )										' CLEAR
    cmdOffset = EVE_IncCMDOffset( cmdOffset, 4)
end sub

'SUBRUTINA PARA EL FONDO DE PANTALLA CON DEGRADE HORIZONTAL (INTENTO DE DIAGONAL)

sub DisplayAPI_FONDODEGRADE(byval colorStart as dword, byval colorEnd as dword)
    dim SCREEN_WIDTH as dword
    dim SCREEN_HEIGHT as dword
    SCREEN_WIDTH = 12800
    SCREEN_HEIGHT = 7680
    dim steps as dword
    steps = 50  ' Número de pasos del gradiente
   
    dim i as dword
    dim rStart, gStart, bStart as dword
    dim rEnd, gEnd, bEnd as dword
    dim rStep, gStep, bStep as float
    dim rCurrent, gCurrent, bCurrent as dword
    
    ' Extraer componentes RGB de los colores inicial y final
    rStart = (colorStart / &h10000) mod &h100
    gStart = (colorStart / &h100) mod &h100
    bStart = colorStart mod &h100
    
    rEnd = (colorEnd / &h10000) mod &h100
    gEnd = (colorEnd / &h100) mod &h100
    bEnd = colorEnd mod &h100
    
    ' Calcular los incrementos por paso
    rStep = (rEnd - rStart) / steps
    gStep = (gEnd - gStart) / steps
    bStep = (bEnd - bStart) / steps
    
    ' Dibujar cada paso del gradiente
    EVE_WaitCmdFifoEmpty()
    displaySPISelect()
    EVE_AddrForWr( RAM_CMD + cmdOffset )
    
    EVE_Write32( CMD_DLSTART )
    cmdOffset = EVE_IncCMDOffset( cmdOffset, 4)
    
    for i = 0 to steps
        ' Calcular color actual
        rCurrent = rStart + rStep * i
        gCurrent = gStart + gStep * i
        bCurrent = bStart + bStep * i
        
        ' Dibujar rectángulo del paso actual
        EVE_Write32( colorRGB( (rCurrent * &h10000) or (gCurrent * &h100) or bCurrent ) )
        cmdOffset = EVE_IncCMDOffset( cmdOffset, 4)
        EVE_Write32( begin( RECTS ) )
        cmdOffset = EVE_IncCMDOffset( cmdOffset, 4)
        
        ' Coordenadas ajustadas para un degradado diagonal
        EVE_Write32( vertex2f( i * (SCREEN_WIDTH / steps), 0 ) )                          ' Esquina superior izquierda
        cmdOffset = EVE_IncCMDOffset( cmdOffset, 4)
        EVE_Write32( vertex2f( (i + 1) * (SCREEN_WIDTH / steps), SCREEN_HEIGHT ) )        ' Esquina inferior derecha
        cmdOffset = EVE_IncCMDOffset( cmdOffset, 4)
    next i
    
    ' Finalizar Display List
    EVE_Write32( CMD_SWAP )
    cmdOffset = EVE_IncCMDOffset( cmdOffset, 4)
end sub

'ESTO ERA PARA UN SOLO FONDO DE PANTALLA QUE HIZO JULI 
sub DisplayAPI_FONDO (byval color as dword)
    EVE_WaitCmdFifoEmpty()												' Await completion of processing 
    displaySPISelect()													' CS low begins SPI transaction 
    EVE_AddrForWr( RAM_CMD + cmdOffset )								' Send address for writing as the next free location in the co-pro buffer
    
	EVE_Write32( CMD_DLSTART )											' CMD_DLSTART
    cmdOffset = EVE_IncCMDOffset( cmdOffset, 4) 
    EVE_Write32( clearColorRGB( color ) )								' clearColorRGB
    cmdOffset = EVE_IncCMDOffset( cmdOffset, 4)
    EVE_Write32( clear( 1, 1, 1 ) )										' CLEAR
    cmdOffset = EVE_IncCMDOffset( cmdOffset, 4)
end sub

sub DisplayAPI_EndScreen()
    EVE_Write32( DISPLAY )												' Display
    cmdOffset = EVE_IncCMDOffset( cmdOffset, 4)
    EVE_Write32( CMD_SWAP )												' SWAP
    cmdOffset = EVE_IncCMDOffset( cmdOffset, 4)
    '-------------------------------------- EndCoProList ------------------------------------
    displaySPIDeselect()                       							' Chip Select high concludes burst    
    EVE_MemWrite32( REG_CMD_WRITE, cmdOffset )							' Update the ring buffer pointer
    EVE_WaitCmdFifoEmpty()												' Await completion of processing 
end sub

sub DisplayAPI_NewStaticScreen ()
    '-------------------------------------- BeginCoProList -----------------------------------
    EVE_WaitCmdFifoEmpty()												' Await completion of processing 
    displaySPISelect()													' CS low begins SPI transaction 
    EVE_AddrForWr( RAM_CMD + cmdOffset)									' Send address for writing as the next free location in the co-pro buffer
    EVE_Write32( CMD_DLSTART )											' CMD_DLSTART
    cmdOffset = EVE_IncCMDOffset( cmdOffset, 4)
end sub

sub DisplayAPI_EndStaticScreen()
    '-------------------------------------- EndCoProList ------------------------------------
    displaySPIDeselect()                       							' Chip Select high concludes burst
    EVE_MemWrite32(REG_CMD_WRITE, (cmdOffset) )							' Update the ring buffer pointer
    EVE_WaitCmdFifoEmpty()												' Await completion of processing 
end sub

sub DisplayAPI_StoreStaticScreen(byval destination as dword)
	dim dlOffset as dword
    dlOffset = EVE_MemRead32( REG_CMD_DL )
    '-------------------------------------- BeginCoProList -----------------------------------
    EVE_WaitCmdFifoEmpty()												' ESPERA A QUE EL PROCESO ESTE COMPLETO  
    displaySPIDeselect()                       							' Chip Select high concludes burst
    EVE_AddrForWr( RAM_CMD + cmdOffset )								' ENVIA address PARA ESCRIBIR EN LA PROXIMA LOCACION LIBRE EN EL co-pro buffer
    
    EVE_Write32( CMD_MEMCPY )											' CMD_MEMCPY
    EVE_Write32( destination )
    EVE_Write32( RAM_DL )
    EVE_Write32( dlOffset )
    cmdOffset = EVE_IncCMDOffset(cmdOffset, 16)
    displaySPIDeselect()                       							' Chip Select high concludes burst
    EVE_MemWrite32(REG_CMD_WRITE, (cmdOffset) )							' Update the ring buffer pointer
    EVE_WaitCmdFifoEmpty()												' Await completion of processing
end sub
sub DisplayAPI_DawStaticScreen(byval ptr as dword, byval offset as dword)
    EVE_Write32( CMD_APPEND )
    EVE_Write32( ptr )
    EVE_Write32( offset )
    cmdOffset = EVE_IncCMDOffset( cmdOffset, 12)
end sub
sub DisplayAPI_WriteText(byval color as dword, byval alpha as byte, byval x as word, byval y as word, byval font as word, byval options as word, byref texto as string, byval etiqueta as byte)
    dim command_size as dword
    dim aux as dword
    command_size = 0
    
    if etiqueta <> 0 and tagEnabled = YES then												' tagMask
        EVE_Write32( TAG_MASK + 1 )										' Enable tagging
        cmdOffset = EVE_IncCMDOffset( cmdOffset, 4)
        EVE_Write32( tagWrite( etiqueta ) )								' tagWrite
        cmdOffset = EVE_IncCMDOffset( cmdOffset, 4)
    end if
    
    EVE_Write32( ColorRGB( color ) )					' clearColorRGB
    EVE_Write32( colorA(alpha))											' colorA

	EVE_Write32( CMD_TEXT )												' CMD_TEXT
    EVE_Write16( x and &hffff )
    EVE_Write16( y and &hffff )
    EVE_Write16( font and &hffff )
    EVE_Write16( options and &hffff )

	command_size = (20 + DisplayAPI_SendString(texto))

    cmdOffset = EVE_IncCMDOffset( cmdOffset, command_size )
    if etiqueta <> 0 and tagEnabled = YES then												' tagMask:
        EVE_Write32(  TAG_MASK )										'  Disable tagging
        cmdOffset = EVE_IncCMDOffset(cmdOffset, 4)
    end if
end sub

sub DisplayAPI_WriteNumber(byval color as dword, byval alpha as byte, byval x as word, byval y as word, byval font as word, byval options as word, byval numero as word, byval etiqueta as byte)
    dim command_size as dword
    dim aux as dword
    command_size = 0
    
    if etiqueta <> 0 and tagEnabled = YES then												' tagMask
        EVE_Write32( TAG_MASK + 1 )										' Enable tagging
        cmdOffset = EVE_IncCMDOffset( cmdOffset, 4)
        EVE_Write32( tagWrite( etiqueta ) )								' tagWrite
        cmdOffset = EVE_IncCMDOffset( cmdOffset, 4)
    end if
    
    EVE_Write32( ColorRGB( color ) )					' clearColorRGB
    cmdOffset = EVE_IncCMDOffset( cmdOffset, 4)
    EVE_Write32( colorA(alpha))											' colorA
    cmdOffset = EVE_IncCMDOffset( cmdOffset, 4)

	EVE_Write32( CMD_NUMBER )												' CMD_TEXT
	aux = ( y and &hffff)
	aux = ( aux shl 16) or ( x and &hffff)
    EVE_Write32( aux )
	aux = ( options and &hffff)
	aux = ( aux shl 16) or ( font and &hffff)
    EVE_Write32( aux )
    EVE_Write32( numero )
    cmdOffset = EVE_IncCMDOffset( cmdOffset, 16 )
    if etiqueta <> 0 and tagEnabled = YES then												' tagMask:
        EVE_Write32( TAG_MASK )										'  Disable tagging
        cmdOffset = EVE_IncCMDOffset(cmdOffset, 4)
    end if
end sub

sub DisplayAPI_DrawRect (byval color as dword, byval alpha as byte, byval x as word, byval y as word, byval width as word, byval height as word, byval line_width as byte)
    EVE_Write32( ColorRGB( color ) )							' colorRGB
    cmdOffset = EVE_IncCMDOffset( cmdOffset, 4)
    EVE_Write32( ColorA( alpha ) )											' colorA
    cmdOffset = EVE_IncCMDOffset( cmdOffset, 4)
    EVE_Write32( begin( LINE_STRIP ) )										' begin
    cmdOffset = EVE_IncCMDOffset(cmdOffset, 4)
    EVE_Write32( lineWidth( line_width * 16 ) )							' lineWidth
    cmdOffset = EVE_IncCMDOffset(cmdOffset, 4)
    
    EVE_Write32( vertex2F( x * 16, y * 16 )	)								' vertex2F
    cmdOffset = EVE_IncCMDOffset( cmdOffset, 4)
    EVE_Write32( vertex2F( ( x + width ) * 16, y * 16 ) )					' vertex2F
    cmdOffset = EVE_IncCMDOffset( cmdOffset, 4)
    EVE_Write32( vertex2F( ( x + width ) * 16, ( y + height ) * 16 ) )		' vertex2F
    cmdOffset = EVE_IncCMDOffset( cmdOffset, 4)
    EVE_Write32( vertex2F( x * 16, ( y + height ) * 16 ) )					' vertex2F
    cmdOffset = EVE_IncCMDOffset( cmdOffset, 4)
    EVE_Write32( vertex2F( x * 16, y * 16 ) )								' vertex2F
    cmdOffset = EVE_IncCMDOffset( cmdOffset, 4)
    EVE_Write32(END_LIST)														' END_LIST
    cmdOffset = EVE_IncCMDOffset( cmdOffset, 4)
end sub

sub DisplayAPI_DrawFilledRect (byval color as dword, byval alpha as byte, byval x as word, byval y as word, byval width as word, byval height as word, byval corner as byte, byval etiqueta as byte)
    if etiqueta <> 0 and tagEnabled = YES  then 												' tagMask
        EVE_Write32( TAG_MASK + 1 )										' Enable tagging
        cmdOffset = EVE_IncCMDOffset( cmdOffset, 4)
        EVE_Write32( tagWrite( etiqueta ) )										' tagWrite
        cmdOffset = EVE_IncCMDOffset( cmdOffset, 4)
	end if
    EVE_Write32( colorRGB( color ) )							' colorRGB
    cmdOffset = EVE_IncCMDOffset(cmdOffset, 4)
    EVE_Write32( colorA( alpha ) )											' colorA
    cmdOffset = EVE_IncCMDOffset( cmdOffset, 4)
    EVE_Write32( lineWidth( corner * 16 ) )								' lineWidth
    cmdOffset = EVE_IncCMDOffset( cmdOffset, 4)
    EVE_Write32( begin( RECTS ) )											' begin
    cmdOffset = EVE_IncCMDOffset( cmdOffset, 4)
    
	EVE_Write32( vertex2F( x * 16, y * 16 ) )								' vertex2F
    cmdOffset = EVE_IncCMDOffset( cmdOffset, 4)
    EVE_Write32( vertex2F( ( width + x )*16, ( height + y ) * 16 ) )		' vertex2F
    cmdOffset = EVE_IncCMDOffset( cmdOffset, 4)
    EVE_Write32( END_LIST )														' END_LIST
    cmdOffset = EVE_IncCMDOffset( cmdOffset, 4)
    
    if etiqueta <> 0 and tagEnabled = YES  then 												' tagMask
        EVE_Write32( TAG_MASK )										' Disable tagging
        cmdOffset = EVE_IncCMDOffset( cmdOffset, 4)
	end if
end sub

sub DisplayAPI_Button (byval color as dword, byval alpha as byte, byval x as word, byval y as word, byval width as word, byval height as word, byval font as word, byval options as word, byref texto as string, byval etiqueta as byte)
    dim aux as dword
	if etiqueta <> 0 and tagEnabled = YES then												' tagMask
        EVE_Write32( TAG_MASK + 1 )										' Enable tagging
        cmdOffset = EVE_IncCMDOffset( cmdOffset, 4)
        EVE_Write32( tagWrite( etiqueta ) )										' tagWrite
        cmdOffset = EVE_IncCMDOffset( cmdOffset, 4)
	end if
    
    '--------------------------- Para la letra -----------------------------
    EVE_Write32( colorRGB( &hD9D9D9 ) )							' colorRGB
    cmdOffset = EVE_IncCMDOffset( cmdOffset, 4)
    EVE_Write32( colorA( alpha ) )											' colorA
    cmdOffset = EVE_IncCMDOffset( cmdOffset, 4)
    EVE_Write32( CMD_FGCOLOR)
    EVE_Write32( color )												' CMD_FGCOLOR
    cmdOffset = EVE_IncCMDOffset( cmdOffset, 8)
    
    
	'--------------------------- CMD_BUTTON -----------------------------
    EVE_Write32( CMD_BUTTON )
	aux = ( y and &hffff)
	aux = ( aux shl 16) or ( x and &hffff)
    EVE_Write32( aux )
	aux = ( height and &hffff)
	aux = ( aux shl 16) or ( width and &hffff)
    EVE_Write32( aux )
	aux = ( options and &hffff)
	aux = ( aux shl 16) or ( font and &hffff)
    EVE_Write32( aux )
    
    cmdOffset = EVE_IncCMDOffset( cmdOffset, 16 + DisplayAPI_SendString(texto) )
    if etiqueta <> 0 and tagEnabled = YES then													' tagMask
        EVE_Write32( TAG_MASK )										' Disable tagging
        cmdOffset = EVE_IncCMDOffset( cmdOffset, 4)
	end if
end sub

sub DisplayAPI_Toggle (byval color as dword, byval alpha as byte, byval x as word, byval y as word, byval width as word, byval font as word, byval options as word, byval state as word, byref texto as string, byval etiqueta as byte)
    dim aux as dword
	if etiqueta <> 0 and tagEnabled = YES then												' tagMask
        EVE_Write32( TAG_MASK + 1 )										' Enable tagging
        EVE_Write32( tagWrite( etiqueta ) )										' tagWrite
        cmdOffset = EVE_IncCMDOffset( cmdOffset, 8)
end if
    
    '--------------------------- Para la letra -----------------------------
    EVE_Write32( colorRGB( &hD9D9D9 ) )							' colorRGB
    cmdOffset = EVE_IncCMDOffset( cmdOffset, 4)
    EVE_Write32( colorA( alpha ) )											' colorA
    cmdOffset = EVE_IncCMDOffset( cmdOffset, 4)
    EVE_Write32( CMD_FGCOLOR)
    EVE_Write32( color )												' CMD_FGCOLOR
    cmdOffset = EVE_IncCMDOffset( cmdOffset, 8)
    
    
	'--------------------------- CMD_BUTTON -----------------------------
    EVE_Write32( CMD_TOGGLE )
    EVE_Write16( x )
    EVE_Write16( y )
    EVE_Write16( width )
    EVE_Write16( font )
    EVE_Write16( options )
    EVE_Write16( state )
    
    cmdOffset = EVE_IncCMDOffset( cmdOffset, 16 + DisplayAPI_SendString(texto) )
    if etiqueta <> 0 and tagEnabled = YES then													' tagMask
        EVE_Write32( TAG_MASK )										' Disable tagging
        cmdOffset = EVE_IncCMDOffset( cmdOffset, 4)
	end if
end sub

sub DisplayAPI_Keys( byval color as dword, byval x as word, byval y as word, byval width as word, byval height as word, byval font as word, byval options as word, byref texto as string)
    dim length as dword
    dim command_size as dword
	dim strTexto as string
	strTexto = texto
    length = Len(strTexto)
    command_size = 0
	
    EVE_Write32(colorRGB( &hFFFFFF ) )					' colorRGB
    cmdOffset = EVE_IncCMDOffset( cmdOffset, 4)
    EVE_Write32( colorA( &hFF ) )								' colorA
    cmdOffset = EVE_IncCMDOffset( cmdOffset, 4 )
    EVE_Write32( CMD_FGCOLOR )									' CMD_FGCOLOR
    EVE_Write32( color )
    cmdOffset = EVE_IncCMDOffset( cmdOffset, 8)
    EVE_Write32( CMD_KEYS )										' CMD_KEYS
    EVE_Write16( x and &hffff )
    EVE_Write16( y and &hffff )
    EVE_Write16( width and &hffff )
    EVE_Write16( height and &hffff )
    EVE_Write16( font and &hffff )
    EVE_Write16( options and &hffff )
    command_size = ( command_size + 16 )
    command_size = ( command_size + DisplayAPI_SendString( texto ) )
    cmdOffset = EVE_IncCMDOffset( cmdOffset, command_size)
end sub

function DisplayAPI_GetTextWidth( byref texto as char, byval font as byte ) as word
    dim a as byte
    dim length as byte
    dim p as dword
    p = EVE_MemRead32(ROM_FONT_ADDR)
    dim prev_width as dword
	
	dim strTexto as string
	strTexto = texto
    length = Len(strTexto)
    
    for a = 0 to length - 1
        prev_width = p + ( 148 * ( font - 16 ) )
        DisplayAPI_GetTextWidth = DisplayAPI_GetTextWidth + EVE_MemRead8( prev_width + mid(strTexto,a+1,1) )
    next a
end function

sub DisplayAPI_DrawNumberBox ( byval color as dword, byval colort as dword, byval alpha as byte, byval x as word, byval y as word, byval width as word, byval height as word, byval corner as byte, byval font as word, byval options as word, byval numero as word, byval etiqueta as byte)

	DisplayAPI_DrawFilledRect (color, alpha, x, y, width, height, corner, etiqueta)
    
	DisplayAPI_WriteNumber(colort, alpha, ( x + width / 2) and &hffff, ( y + height / 5 ) and &hffff, font, options, numero, etiqueta)
end sub


sub DisplayAPI_DrawTextBox ( byval color as dword, byval colort as dword, byval alpha as byte, byval x as word, byval y as word, byval width as word, byval height as word, byval corner as byte, byval font as word, byval options as word, byref texto as string, byval etiqueta as byte)
	DisplayAPI_DrawFilledRect (color, alpha, x, y, width, height, corner, etiqueta)
	DisplayAPI_WriteText(colort, alpha, ( x + width / 2) and &hffff, ( y + height / 5 ) and &hffff, font, options, texto, etiqueta)
end sub


sub DisplayAPI_FloatingScreen( byval x as word, byval y as word, byval width as word, byval height as word )
    EVE_Write32( scissorXY( x, y ) )
    cmdOffset = EVE_IncCMDOffset(cmdOffset, 4)
    EVE_Write32( scissorSize( width, height ) )
    cmdOffset = EVE_IncCMDOffset(cmdOffset, 4)
end sub

sub DisplayAPI_CloseFloatingScreen()
    EVE_Write32( scissorXY( 0, 0 ) )
    cmdOffset =  EVE_IncCMDOffset(cmdOffset, 4)
    EVE_Write32(scissorSize( 800, 480 ) )
    cmdOffset = EVE_IncCMDOffset(cmdOffset, 4)
end sub

sub DisplayAPI_Slider( byval x as word, byval y as word, byval w as word, byval h as word, byval options as word, byval value as word, byval range as word,  byval etiqueta as byte)

	EVE_Write32(CMD_SLIDER)
	EVE_Write16( x and &hffff )
    EVE_Write16( y and &hffff )
    EVE_Write16( w and &hffff )
    EVE_Write16( h and &hffff )
	EVE_Write16( options and &hffff )
	EVE_Write16( value and &hffff )
	EVE_Write16( range and &hffff )
    cmdOffset = EVE_IncCMDOffset(cmdOffset, 16)
    
end sub

sub DisplayAPI_Scroll( byval alpha as byte, byval x as word, byval y as word, byval w as word, byval h as word, byval options as word, byval value as word, byval size as word, byval range as word,  byval etiqueta as byte)
    'if etiqueta <> 0 and tagEnabled = YES then										' tagMask
    '    EVE_Write32( TAG_MASK + 1 )							' Enable tagging
    '    cmdOffset = EVE_IncCMDOffset(cmdOffset, 4) 
    '    EVE_Write32( tagWrite( etiqueta ) ) 							' tagWrite
    '    cmdOffset = EVE_IncCMDOffset(cmdOffset, 4)        
    'end if
    'EVE_Write32( colorRGB( 0 ) )                        	' colorRGB
    'cmdOffset = EVE_IncCMDOffset(cmdOffset, 4)
    'EVE_Write32( colorA( alpha ) )        						' colorA
    'cmdOffset = EVE_IncCMDOffset(cmdOffset, 4)
    'EVE_Write32( CMD_BGCOLOR )									' Color
    'EVE_Write32( &hE6E6E6 )
    'cmdOffset = EVE_IncCMDOffset(cmdOffset, 8)
    'EVE_Write32( CMD_FGCOLOR)
    'EVE_Write32( &hA6A6A6)
    'cmdOffset = EVE_IncCMDOffset(cmdOffset, 8)
    
    
    EVE_Write32( CMD_SCROLLBAR)
	EVE_Write16( x and &hffff )
    EVE_Write16( y and &hffff )
	EVE_Write16( w and &hffff )
    EVE_Write16( h and &hffff )
	EVE_Write16( options and &hffff )
    EVE_Write16( value and &hffff )
	EVE_Write16( size and &hffff )
    EVE_Write16( range and &hffff )
    cmdOffset = EVE_IncCMDOffset( cmdOffset, 20)
    'EVE_Write32( CMD_TRACK)										' Track
	'EVE_Write16( x and &hffff )
    'EVE_Write16( y and &hffff )
	'EVE_Write16( w and &hffff )
    'EVE_Write16( h and &hffff )
    'EVE_Write32( etiqueta )
    'cmdOffset = EVE_IncCMDOffset(cmdOffset, 16)
   
    'if etiqueta <> 0 and tagEnabled = YES then										' tagMask
    '    EVE_Write32(TAG_MASK )								' Disable tagging
    '    cmdOffset = EVE_IncCMDOffset(cmdOffset, 4)
    'end if
end sub


sub DisplayAPI_Track( byval x as word, byval y as word, byval w as word, byval h as word, byval etiqueta as word )
    EVE_Write32( CMD_TRACK)
    EVE_Write16( x and &hffff )
    EVE_Write16( y and &hffff )
    EVE_Write16( w and &hffff )
    EVE_Write16( h and &hffff )
    EVE_Write32(etiqueta)
    cmdOffset = EVE_IncCMDOffset(cmdOffset, 16)
end sub

sub DisplayAPI_Spinner(byval x as word, byval y as word, byval style as word, byval scale as word)
    ' Color del spinner
    EVE_Write32(colorRGB(COLORCUADRO))  ' Configurar color del spinner
    cmdOffset = EVE_IncCMDOffset(cmdOffset, 4)

    EVE_Write32(colorA(255))         ' Configurar transparencia
    cmdOffset = EVE_IncCMDOffset(cmdOffset, 4)

    ' CMD_SPINNER
    EVE_Write32(CMD_SPINNER)         ' Escribir el comando CMD_SPINNER
    cmdOffset = EVE_IncCMDOffset(cmdOffset, 4)

    ' Escribir coordenada X (16 bits)
    EVE_Write16(x)                   ' Escribir X
    cmdOffset = EVE_IncCMDOffset(cmdOffset, 2)

    ' Escribir coordenada Y (16 bits)
    EVE_Write16(y)                   ' Escribir Y
    cmdOffset = EVE_IncCMDOffset(cmdOffset, 2)

    ' Escribir Style y Scale (32 bits)
    EVE_Write32((scale shl 16) or (style and &hffff))
    cmdOffset = EVE_IncCMDOffset(cmdOffset, 4)
end sub

sub DisplayAPI_Coordinates ()
    touch = EVE_MemRead32( REG_TOUCH_SCREEN_XY )
end sub
sub DisplayAPI_LoadImage(byval ptr as dword, byval options as byte)
    EVE_Write32(CMD_LOADIMAGE)  ' Escribe el comando en el buffer de comandos
	cmdOffset = EVE_IncCMDOffset(cmdOffset, 4)
	EVE_Write32(ptr)     ' Especifica la dirección de la imagen en la memoria tiene que durar 4 byte
	cmdOffset = EVE_IncCMDOffset(cmdOffset, 4)
	EVE_Write32(options)        ' Define opciones para la carga de la imagen tiene que durar 4 byte
    cmdOffset = EVE_IncCMDOffset(cmdOffset, 4)
end sub
sub DisplayAPI_GetProps( byval ptr as dword, byval w as dword, byval h as dword)
    EVE_Write32( CMD_GETPROPS )
    EVE_Write32( ptr )
    EVE_Write32( w )
    EVE_Write32( h )
    cmdOffset = EVE_IncCMDOffset(cmdOffset, 16)
end sub

sub DisplayAPI_BitmapHandle( byval handle as byte)
	EVE_Write32( bitmapHandle( handle ) )
    cmdOffset = EVE_IncCMDOffset(cmdOffset, 4)
end sub

sub DisplayAPI_BitmapSource( byval addr as dword )
	EVE_Write32( bitmapSource( addr ) )
    cmdOffset = EVE_IncCMDOffset(cmdOffset, 4)
end sub

sub DisplayAPI_BitmapLayout( byval format as byte, byval linestride as word, byval height as word)   
    EVE_Write32( bitmapLayout( format, linestride, height ) )
    cmdOffset = EVE_IncCMDOffset(cmdOffset, 4)
end sub

sub API_BITMAP_SIZE( byval filter as byte, byval wrapx as byte, byval wrapy as byte, byval width as word, byval height as word)
    EVE_Write32( bitmapSize ( filter, wrapx, wrapy, width, height ) )
    cmdOffset = EVE_IncCMDOffset(cmdOffset, 4)
end sub

sub DisplayAPI_BitmapTransformA( byval a as dword)
    EVE_Write32( bitmapTransformA ( a ) )           
    cmdOffset = EVE_IncCMDOffset(cmdOffset, 4) 
end sub

sub DisplayAPI_BitmapTransformE( byval e as dword )
    EVE_Write32(bitmapTransformE ( e ) )                  
    cmdOffset = EVE_IncCMDOffset(cmdOffset, 4) 
end sub
sub API_BITMAP_LAYOUT_H( byval linestride as byte, byval height as byte)
    EVE_Write32( bitmapLayoutH(linestride,height) )
    cmdOffset = EVE_IncCMDOffset( cmdOffset, 4 )
end sub

sub DisplayAPI_BitmapHSize( byval width as byte, byval height as byte)
    EVE_Write32 ( bitmapSizeH ( width , height ) )              
    cmdOffset = EVE_IncCMDOffset( cmdOffset, 4 )
end sub

sub DisplayAPI_Gradient( byval x0 as word, byval y0 as word, byval rgb0 as dword, byval x1 as word, byval y1 as word, byval rgb1 as dword)
    EVE_Write32( CMD_GRADIENT )
    EVE_Write32( ( y0 shl 16 ) or ( x0 and &hffff ) )
    EVE_Write32( rgb0 )
    EVE_Write32( ( y1 shl 16 ) or ( x1 and &hffff ) )
    EVE_Write32( rgb1 )
    cmdOffset = EVE_IncCMDOffset(cmdOffset, 20)
end sub

function DisplayAPI_SendString(byref texto as string) as byte
    dim StringLength as dword
    dim length as dword
    dim character as char

	dim strTexto as string
	strTexto = texto
    StringLength = Len(strTexto)

	for length = 1 to StringLength
		character = asc(mid(strTexto,length,1))
		EVE_Write8( character )															' Append one null as ending flag
	next length
    EVE_Write8( 0 )															' Append one null as ending flag
    
	StringLength = StringLength + 1
    DisplayAPI_SendString = StringLength
    ' ------------------------- Pad to multiple of 4 -----------------------------
    StringLength = StringLength and &h03 									' Mask off the bottom 2 bits and see if multiple of 4
    if StringLength = &h03 then
        EVE_Write8( &h00 )
        DisplayAPI_SendString = DisplayAPI_SendString + 1
    else if StringLength = &h02 then
        EVE_Write8( &h00 )
        EVE_Write8( &h00 )
        DisplayAPI_SendString = DisplayAPI_SendString + 2
    else if StringLength = &h01 then
        EVE_Write8( &h00 )
        EVE_Write8( &h00 )
        EVE_Write8( &h00 )
        DisplayAPI_SendString = DisplayAPI_SendString + 3
    end if
end function
function UI_ReadDisplayTag () as byte
    dim tagLeido as byte = 0         ' tag de los botones en pantalla 
	dim x as byte 
	if displayInUse = true then
		UI_ReadDisplayTag = 0
		exit function
	end if
'	if modoMensajeInformativo = messageTimed then
'		if timeMensajeInformativo > 0 then
'			timeMensajeInformativo = timeMensajeInformativo - 1
'		else
'			tagLeido = 254
'			modoMensajeInformativo = messageBlocking
'		end if
'	else
		displayInUse = true
    	tagLeido = displayAPI_ReadTag()
		displayInUse = false
 '   end if
	if tagLeido <> 0 and tagLeido <> 255 then
		UI_ReadDisplayTag = 0
        screenState = SCREEN_PRESSED
        tagAnterior = tagLeido
    else if screenState = SCREEN_PRESSED then
        screenState = SCREEN_RELEASED
		UI_ReadDisplayTag = tagAnterior
		tag = tagAnterior
		tagAnterior = 0
    else
        screenState=SCREEN_UNPRESSED
		UI_ReadDisplayTag = 0
    end if
end function
sub UI_display()
	dim refresh as byte = UI_ReadDisplayTag()
	dim refreshInputs as boolean = UI_refreshInputs()
	if refresh <> 0 or refreshInputs = true then
		UI_goToScreen(refresh)
'		UI_guardarValores()
		UI_cargarValores()
		UI_reenviarPantalla()
	end if
end sub
sub UI_updateMessage(byref message as string)
	if UI_showMessage(message) then
		UI_reenviarPantalla()
	end if
end sub
function UI_goToScreen(byval tagValue as byte) as byte
	select case tagValue
		case tagboton:
		UI_SECOND()
		case tagboton2:
		
		case tagATRAS:
		UI_Home()
		case else:
		sys.reboot()	
	end select 
end function 

sub DisplayAPI_DrawBitmap(byval ptr as dword, byval x as word, byval y as word, byval width as word, byval height as word)
    ' Configurar el manejador de la imagen
    EVE_Write32(bitmapHandle(0))  ' Usar el manejador 0
    cmdOffset = EVE_IncCMDOffset(cmdOffset, 4)

    ' Especificar la fuente de la imagen
    EVE_Write32(bitmapSource(ptr))  ' Usar la dirección de la imagen
    cmdOffset = EVE_IncCMDOffset(cmdOffset, 4)

    ' Especificar el formato y layout de la imagen
    EVE_Write32(bitmapLayout(RGB565, width * 2, height))  ' RGB565, stride=width*2, height
    cmdOffset = EVE_IncCMDOffset(cmdOffset, 4)

    ' Especificar el tamaño en pantalla
    EVE_Write32(bitmapSize(NEAREST, BORDER, BORDER, width, height))  ' Sin escalado
    cmdOffset = EVE_IncCMDOffset(cmdOffset, 4)

    ' Dibujar la imagen
    EVE_Write32(begin(BITMAPS))
    cmdOffset = EVE_IncCMDOffset(cmdOffset, 4)
    EVE_Write32(vertex2ii(x, y, 0, 0))  ' Dibujar en (x, y) con el manejador 0
    cmdOffset = EVE_IncCMDOffset(cmdOffset, 4)
end sub

sub cargar_imagen()
    dim i as dword
	DisplayAPI_loadimage(RAM_G,0)
    ' Escribir el color en un bloque de memoria en RAM_G
    for i = 0 to (8192) step 1  ' 64x64 píxeles * 2 bytes por píxel
       EVE_MemWrite16(RAM_G + i*2,array(i)) ' la ram tiene posiciones de memoria de 32bits 
    next i
	   EVE_WaitCmdFifoEmpty()
end sub

sub mostrar_imagen(byval x as word, byval y as word)
    dim ptr as dword
	dim i as dword
    ' Configurar el handle de la imagen
    EVE_Write32(bitmapHandle(0))  ' Handle 0
    cmdOffset = EVE_IncCMDOffset(cmdOffset, 4)

    ' Especificar la fuente de la imagen
    EVE_Write32(bitmapSource(RAM_G))  ' Direccion de la imagen
    cmdOffset = EVE_IncCMDOffset(cmdOffset, 4)

    ' Especificar el formato y layout de la imagen
    EVE_Write32(bitmapLayout(RGB565,128,64))  ' RGB565, stride = ancho*2, altura = 64
    cmdOffset = EVE_IncCMDOffset(cmdOffset, 4)

    ' Especificar el tamaño en pantalla
    EVE_Write32(bitmapSize(1,BORDER,BORDER,64,64))  ' Sin escalado
    cmdOffset = EVE_IncCMDOffset(cmdOffset, 4)

    ' Dibujar la imagen
    EVE_Write32(begin(BITMAPS))
    cmdOffset = EVE_IncCMDOffset(cmdOffset, 4)
	
    EVE_Write32(vertex2f(x,y))   'Dibujar en (x, y) (PODES USAR vertex2ii() agregando el handle 0 y cell
    cmdOffset = EVE_IncCMDOffset(cmdOffset, 4)
	
end sub





function UI_refreshInputs() as boolean
	UI_refreshInputs = false
	
	if pantallaActual <> PANTALLA_ENTRADAS then
		exit function
	end if
	
	'if entradaValue(0) <> io.lineget( PrintEnd ) then
	'	entradaValue(0) = io.lineget( PrintEnd )
	'	UI_refreshInputs = true
	'end if

	'if entradaValue(1) <> io.lineget( Error_M ) then
	'	entradaValue(1) = io.lineget( Error_M )
	'	UI_refreshInputs = true
	'end if

'	if entradaValue(2) <> io.lineget( Paper ) then
'		entradaValue(2) = io.lineget( Paper )
'		UI_refreshInputs = true
'	end if

'	if entradaValue(3) <> io.lineget( Ribbon ) then
'		entradaValue(3) = io.lineget( Ribbon )
'		UI_refreshInputs = true
'	end if

'	if entradaValue(4) <> io.lineget( Online ) then
'		entradaValue(4) = io.lineget( Online )
'		UI_refreshInputs = true
'	end if

'	if entradaValue(5) <> io.lineget( Plataforma ) then
'		entradaValue(5) = io.lineget( Plataforma )
'		UI_refreshInputs = true
'	end if
	
'	if entradaValue(6) <> io.lineget( Home ) then
'		entradaValue(6) = io.lineget( Home )
'		UI_refreshInputs = true
'	end if

'	if entradaValue(7) <> io.lineget( Ciclo ) then
'		entradaValue(7) = io.lineget( Ciclo )
'		UI_refreshInputs = true
'	end if
	
	if UI_refreshInputs then
		UI_reenviarPantalla()
	end if
end function
sub UI_cargarValores()
	dim aux as byte = pantallaActual and FLAGS_PANTALLA
	dim pantalla as byte = pantallaActual and VALORES_PANTALLA
	if aux = CARGAR_VALORES then
		pantallaActual = pantallaActual - CARGAR_VALORES
		select case pantalla
			case PANTALLA_ENTRADAS:
'			case PANTALLA_SALIDAS:
			case else:
				sys.reboot()
		end select 
	end if
end sub
sub UI_reenviarPantalla()
	dim pantalla as byte = pantallaActual and VALORES_PANTALLA
	select case pantalla
		case PANTALLA_HOME:
		case else:
			sys.reboot()
	end select
end sub
function UI_showMessage(byref message as string) as no_yes
	if message <> mensajeInformativo then
		mensajeInformativoPendiente = YES
		mensajeInformativo = message
	else
		mensajeInformativoPendiente = NO
	end if
	UI_showMessage = mensajeInformativoPendiente
end function
sub UI_Home()
    while displayInUse = true
    wend
    displayInUse = true
    ' 1. Inicializar pantalla con fondo celeste
    DisplayAPI_FONDO(&h66CCFF)
	'2  Desplegar el icono guardado al inicio en RAM_G
	mostrar_imagen(3000,3000)
    ' 3. Mostrar texto y botones
    DisplayAPI_WriteText(COLORCUADRO, 255, 400, 70, 31, 512, "IAS-100 TOUCH", 0)
    DisplayAPI_Button(COLORCUADRO, 255, 20, 350, 175, 90, 31, 512, "IMPRE", tagboton)
    DisplayAPI_Button(COLORCUADRO, 255, 210, 350, 175, 90, 31, 512, "ALARM", tagboton2)
    DisplayAPI_Button(COLORCUADRO, 255, 410, 350, 175, 90, 31, 512, "INHABI", tagboton3)
    DisplayAPI_Button(COLORCUADRO, 255, 610, 350, 175, 90, 31, 512, "CONFIG", tagboton4)
    ' 4. Finalizar pantalla
    DisplayAPI_EndScreen()
    displayInUse = false
end sub
sub UI_SECOND ()
	while displayInUse = true
	wend
	displayInUse = true
	DisplayAPI_FONDO(&hff33FF)   	'INICIALIZO PANTALLA Y PONGO FONDO VIOLETA
	DisplayAPI_WriteText(&hffccff,255,400,70,31,512,"Para volver presione ATRAS",0)
	DisplayAPI_Button (COLORCUADRO,255,350,250,190,90,31,512,"ATRAS",tagATRAS)
	DisplayAPI_EndScreen() 			'TERMINO MI PANTALLA 
	displayInUse = false
end sub
sub UI_CARGA()
while displayInUse = true
	wend
	displayInUse = true
	DisplayAPI_FONDO(&h66CCFF)   			'INICIALIZO PANTALLA Y PONGO FONDO CELESTE
	DisplayAPI_WriteText(COLORCUADRO,255,420,270,31,512,"Cargando...",4)
	displayapi_spinner(400,180, 0, 0) 		'Rueda de carga 
	DisplayAPI_EndScreen() 			'TERMINO MI PANTALLA 
	displayInUse = false
end sub 
